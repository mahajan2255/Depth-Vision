import cv2
import torch
import numpy as np

# Load MiDaS model
midas = torch.hub.load('intel-isl/midas', 'MiDaS_small')
midas.to('cpu')
midas.eval()

# Load transform
transforms = torch.hub.load('intel-isl/midas', 'transforms')
transform = transforms.small_transform

# Start webcam
cap = cv2.VideoCapture(0)

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break

    # Convert to RGB for MiDaS
    img = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    imgbatch = transform(img).to('cpu')

    with torch.no_grad():
        prediction = midas(imgbatch)
        prediction = torch.nn.functional.interpolate(
            prediction.unsqueeze(1),
            size=img.shape[:2],
            mode='bicubic',
            align_corners=False
        ).squeeze()

        output = prediction.cpu().numpy()

    # Normalize for display
    depth_min = output.min()
    depth_max = output.max()
    depth_vis = (255 * (output - depth_min) / (depth_max - depth_min)).astype(np.uint8)

    # Apply colormap (optional but looks cool)
    depth_colored = cv2.applyColorMap(depth_vis, cv2.COLORMAP_INFERNO)

    # Show both original and depth
    cv2.imshow('Webcam Frame', frame)
    cv2.imshow('Depth Map', depth_colored)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
